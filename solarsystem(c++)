#include <GL/glut.h>
#include <stdlib.h>
#include <iostream>
#include <math.h>
const GLfloat light_ambient[] = { 0.f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };
const GLfloat mat_ambient[] = { 0.0f, 1.0f, 0.3f, 1.0f };
const GLfloat mat_diffuse[] = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[] = { 0.5f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 60.0f };
float zaminx = 10.0;
float zaminy = 0.0;
float zaminz = 0.0;
float mahx = 10.0;
float mahy = 5.0;
float mahz = 0.0;
float sayarex = 0.0;

float sayarey = 0.0;
float sayarez = 0.0;
float sayaretime = 5.0;
float zamintime = 0.0;
float mahtime = 0.0;
float angle = 0.0f;
static void display(void);
void timer(int someshit);
void resize(int width, int height);
int main(int argc, char* argv[]) {
glutInit(&argc, argv);
glutInitWindowSize(720, 720);
glutInitWindowPosition(20, 20);
glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
glutCreateWindow
("4 core"
)
;
glutReshapeFunc(resize);
glutDisplayFunc(display);
glClearColor(0, 0, 0, 1);
glEnable(GL_DEPTH_TEST);
glEnable(GL_LIGHT0);
glEnable(GL_COLOR_MATERIAL);
glEnable(GL_LIGHTING);
glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
glLightfv(GL_LIGHT0, GL_POSITION, light_position);
glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
glutTimerFunc(30, timer, 1);
glutIdleFunc(display);
glutMainLoop();
return EXIT_SUCCESS
;
}
static void display(void
)
{
glClear(
GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
glPushMatrix();
glColor3d(1, 0.5, 0);
glTranslated(0, 0,
-10);
glRotated(angle, 1.0f, 1.0f, 1.0f);
glutSolidSphere(1, 15, 15);
glPopMatrix();
glPushMatrix();
glColor3d(0, 1, 0);
glTranslated(zaminx, zaminy, zaminz);
glRotated(angle, 1.0f, 1.0f, 1.0f);
glutSolidSphere(0.3, 30, 30);
glPopMatrix();
glPushMatrix();
glColor3d(0.95, 0.94, 0.78);
glTranslated(zaminx + mahx, zaminy + mahy, mahz);
glutSolidSphere(0.05, 50, 50);
glPopMatrix();
glPushMatrix();

glColor3d(1, 0.5, 0.75);
glTranslated(sayarex, sayarey, sayarez);
glRotated(angle, 1.0f, 1.0f, 1.0f);
glutSolidSphere(0.2, 30, 30);
glPopMatrix();
angle += 0.4;
glutSwapBuffers();
}
void resize(int width, int height) {
glViewport(0, 0, width, height);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glFrustum(-(float)width / (float)height, (float)width / (float)height, -1.0, 1.0, 2.0,
80);
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
}
void timer(int someshit) {
sayaretime += 0.06;
zamintime += 0.04;
mahtime += 0.1;
zaminx = 3.5 * cos(zamintime);
zaminz = -10 + 2 * sin(zamintime);
mahx = 0.5 * cos(mahtime);
mahy = 0.5 * sin(mahtime);
mahz = zaminz + 0.5 * sin(mahtime);
sayarex = 2.5 * cos(sayaretime);
sayarez = -10 + 2 * sin(sayaretime);
glLoadIdentity();
glutPostRedisplay();
glutTimerFunc(30, timer, 1);
}
